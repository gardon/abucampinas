<?php
// $Id: calendar.theme,v 1.1.2.17 2007/07/03 19:35:13 karens Exp $

/**
 * @addtogroup themeable
 * @{
 */

/**
 *  Themeable node display
 *
 *  appends the field name to the title
 *  constructs a teaser out of any non-date fields in the view
 */
function theme_calendar_calendar_node($node, $type) {
   // Display the regular teaser view for local events.
   if (!$node->remote && $type == 'calendar_node_day') {
     $node = node_load($node->nid);
     $node->teaser = node_view($node, TRUE, FALSE);
     $node->title = '';
   }
   // For other views, construct a teaser out of the provided fields.
   else {
     if ($node->label && !strstr($node->title, $node->label)) {
       $node->title .= ' ('. $node->label .')';
     }
     if (isset($node->fields) && !isset($node->teaser)) {
       foreach ($node->fields as $field) {
         $node->teaser .= '<div>'. $field .'</div>';
       }
     }
     if (!$node->url && !$node->remote) {
       $node->url = "node/$node->nid";
     }
   }
   // Remote nodes may come in with lengthy descriptions that won't fit
   // in small boxes of year, month, and week calendars.
   if ($type != 'calendar_node_day' && $node->remote) {
     $node->teaser = '';
   }
   return theme($type, $node);
}

/**
 * Theme the calendar title and breadcrumbs
 *   Arguments are evaluated in year, month, day or year, week order
 *   so you can track previous values in the session.
 *
 * @param string $field_type - 'YEAR', 'MONTH', 'DAY', 'WEEK'
 * @param integer $value - the current number for the field type as selected in the view argument.
 * @return string formatted title
 */
function theme_calendar_arg_title($field_type, $value, $query) {
	$view = $GLOBALS['current_view'];
	calendar_load_date_api();
	$value = intval(check_plain($value));
	if (empty($value)) {
    if ($view->mon) {
    	$stamp = date_gmmktime(array('year' => $view->year, 'mon' => $view->mon, 'mday' => 1));
      return date_format_date('F Y', $stamp);
    }
    elseif ($view->year) {
     return $view->year;
    }
	}
	else {
		switch ($field_type) {
    case 'YEAR':
      $view->year = $value;
      return $view->year;
    case 'MONTH':
      $view->mon = $value;
      $stamp = date_gmmktime(array('year' => $view->year, 'mon' => $view->mon, 'mday' => 1));
      return date_format_date('F Y', $stamp);
    case 'DAY':
      $stamp = date_gmmktime(array('year' => $view->year, 'mon' => $view->mon, 'mday' => $value));
      return date_format_date('l, F j Y', $stamp);
    case 'WEEK':
    	return t('Week @week @year', array('@year' => $view->year, '@week' => $value));
   }
	}
}

/**
 * Theme the navigation bar title
 *
 * @param string $field_type - 'YEAR', 'MONTH', 'DAY', 'WEEK'
 * @param integer $view - the current view object
 * @return string formatted title
 */
function theme_calendar_nav_title($field_type, $view) {
	calendar_load_date_api();
	switch ($field_type) {
    case 'YEAR':
      return $view->year;
    case 'MONTH':
    	// Month navigation titles are used as links in blocks and in the year view.
      // For the timestamp, use the second day of the month because gm functions sometimes return the previous month
      $timestamp = date_array2unix(array('year' => $view->year, 'mon' => $view->month, 'mday' => 2));
      if ($view->build_type == 'block' || $view->calendar_type == 'year') {
      	return l(date_format_date('M Y', $timestamp), $view->real_url .'/'. $view->year .'/'. $view->month, array(), calendar_url_append($view));
      }
      else {
      	return date_format_date('F Y', $timestamp);
      }
    case 'DAY':
      $timestamp = date_array2unix(array('year' => $view->year, 'mon' => $view->month, 'mday' => $view->day, 'hours' => 12));
      return date_format_date('l, F j Y', $timestamp);
    case 'WEEK':
    	return t("Week of @date", array('@date' => date_format_date('F j Y', calendar_week('start_timestamp', $view, $view->week))));
   }
}

/**
 * Format the calendar navigation
 */
function theme_calendar_show_nav($view, $mini = FALSE, $links = FALSE) {
  calendar_load_calendar_api();

  // add links to the top of the calendar to switch from one view to another
  if ($links) {
    $view->real_url = calendar_get_url($view, $view->args);
    $base_url = $view->real_url .'/'. $view->year;
    $month    = $view->month && $view->month != CALENDAR_EMPTY_ARG ? $view->month : calendar_user_date('month');
    $day      = $view->day && $view->day != CALENDAR_EMPTY_ARG ? $view->day : calendar_user_date('day');
    $week     = $view->week && $view->week != CALENDAR_EMPTY_ARG ? $view->week : calendar_user_date('week');

    $append = calendar_url_append($view);
    if ($_GET['view']) {
      $append .= '&view='. $_GET['view'];
    }

    $calendar_links[] = array('title' => t('Year'), 'href' => $view->real_url .'/'. $view->year, 'query' => $append);
    $calendar_links[] = array('title' => t('Month'), 'href' => $view->real_url .'/'. $view->year .'/'. $month , 'query' => $append);
    // Week calculation is not supported for historical dates.
    if ($view->year > 1970) {
    	// Hiding week view for now since it isn't working right.
      //$calendar_links[] = array('title' => t('Week'), 'href' => $view->real_url .'/'. $view->year .'/W'. $week, 'query' => $append);
    }
    $calendar_links[] = array('title' => t('Day'), 'href' => $view->real_url .'/'. $view->year .'/'. $month .'/'. $day, 'query' => $append);
    $output  .= theme('calendar_links', $calendar_links, 'month');
  }

  $output .= '<div class="calendar-calendar">'. theme('calendar_nav_wrapper', calendar_nav($view, $mini), array()) .'</div>';
  return $output;
}

/**
 * Format the 'next' navigation controls for calendar calendars
 *
 * @param link
 *   The url for the navigation
 */
function theme_calendar_nav_next($url, $text = TRUE, $querystring = NULL) {
  return '<span class="next">'. l(($text ? t('next') : '') .' »', $url, array(), (!empty($querystring) ? $querystring : NULL)) .'</span>';
}

/**
 * Format the 'previous' navigation controls for calendar calendars
 *
 * @param link
 *   The url for the navigation
 */
function theme_calendar_nav_prev($url, $text = TRUE, $querystring = NULL) {
  return '<span class="prev">'. l('« '. ($text ? t('prev') : ''), $url, array(), (!empty($querystring) ? $querystring : NULL)) .'</span>';
}

/**
 *  Theme for the back/next navigation bar
 *  This is really hackish to put it in a table, but so many themes break otherwise that I gave up on anything else
 */
function theme_calendar_nav_wrapper($array) {
  return theme('table', $array, array());
}

/**
 * Format the links for calendar calendars
 *
 * @param links
 *   An array of links to render
 * @param view
 *   The current view being rendered
 */
function theme_calendar_links($links, $view) {
  return theme('links', $links);
}

/**
 * Format a node stripe legend
 */
function theme_calendar_stripe_legend($stripe_labels) {

  $header = array(
      array('class' => 'legend', 'data' => t('Item')),
      array('class' => 'legend', 'data' => t('Key'))
      );
  foreach ($stripe_labels as $stripe => $label) {
    $node = new StdClass();
    $node->stripe = $stripe;
    $rows[] = array($label, theme('calendar_stripe_stripe', $node), array('class' => 'stripe'));
  }
  $output = theme('table', $header, $rows, array('class' => 'mini'));
  return $output;
}

/**
 * Format node stripes
 * Add key value to text, then hide it with css for accessibility to screen readers
 */
function theme_calendar_stripe_stripe($node) {
  static $stripe, $stripe_map;

  if(!$stripe_map[$node->stripe]) {
    if($stripe >= 10) {
      $stripe = 1;
    }
    else {
      $stripe++;
    }
    $stripe_map[$node->stripe] = $stripe;
  }

  $output .= '<div class="stripe-'. $stripe_map[$node->stripe] .'" title="Key: '.$stripe_map[$node->stripe] .'"><span class="stripe">Key '.$stripe_map[$node->stripe] .'</span></div>'."\n";
  return $output;
}

/**
 * Format a calendar view
 *
 * @param day
 *   The day to display.
 */
function theme_calendar_year($op, $header, $rows, $month_rows) {
  $year = array_shift($month_rows);

  $output = '<div class="calendar-calendar"><div class="year-view">';
  $output .= $year;
  $i = 0;
    foreach ($month_rows as $month) {
      $i++;
      $row .= '<div class="mini">'. $month .'</div>';
      if ($i == 3) {
        $output .= '<div class="mini-row">'. $row .'</div>';
        $row = '';
        $i = 0;
      }
    }
  $output .= "</div></div>\n";
  return $output;
}

/**
 * Format a calendar view
 *
 * @param day
 *   The day to display.
 */
function theme_calendar_month($op, $header, $rows) {
  $attrs = array();
  if ($op == 'mini') {
    $attrs = array('class' => 'mini');
  }
  $output = theme("table", $header, $rows, $attrs);
  return '<div class="calendar-calendar"><div class="month-view">'. $output ."</div></div>\n";
}

/**
 * Format a calendar view
 *
 * @param day
 *   The day to display.
 */
function theme_calendar_week($op, $header, $rows) {
  $output = theme("table", $header, $rows);
  return '<div class="calendar-calendar"><div class="week-view">'. $output ."</div></div>\n";
}

/**
 * Format a calendar view
 *
 * @param day
 *   The day to display.
 */
function theme_calendar_day($op, $header, $rows) {
  if (strstr($header[0]['data'], '<table')) {
    $output = $header[0]['data'];
    $header = array();
  }
  $output .= theme("table", $header, $rows);
  return '<div class="calendar-calendar"><div class="day-view">'. $output ."</div></div>\n";
}

/**
 * Format an calendar node for display in an expanded calendar, like a calendar page
 *
 * @param node
 *   The node being displayed
 */
function theme_calendar_node_day($node) {
  $output .= '<div class="calendar dayview">'."\n";
  $output .= theme('calendar_stripe_stripe', $node);

  if ($node->calendar_start != $node->calendar_end && $node->start_time_format) {
    $start_label = t('Start: ');
    $end_label = t('End: ');
  }
  else {
    $start_label = '';
    $end_label = '';
  }

  $output .= '<h2 class="title">'. l($node->title, "$node->url", array('title' => t('view this item'))) .'</h2>'."\n";

  $output .= '<div class="start">'. $start_label . $node->start_format .'</div>'."\n";
  if ($node->calendar_start != $node->calendar_end && $node->calendar_end) {
    $output .= '<div class="end">'. $end_label . $node->end_format .'</div>'."\n";
  }
  if ($node->teaser) {
  	$node->teaser = str_replace('\n', "\n", $node->teaser);
    // Remove escaping added by ical.
    $node->teaser = stripslashes($node->teaser);
    // Run through check_markup.
    $node->teaser = check_markup($node->teaser);
    $output .= '<div class="content">'. check_markup($node->teaser) ."</div>\n";
  }
  $output .= '<div class="links">'. theme('links', $node->calendar_links) ."\n</div>";
  $output .= "</div>\n";
  return $output;
}

/**
 * Format an calendar node for display in an expanded calendar, like a calendar page
 *
 * @param node
 *   The node being displayed
 */
function theme_calendar_node_week($node) {
  $output .= '<div class="calendar weekview">'."\n";
  $output .= theme('calendar_stripe_stripe', $node);

  if ($node->calendar_start != $node->calendar_end && $node->start_time_format) {
    $start_label = t('Start: ');
    $end_label = t('End: ');
  }
  else {
    $start_label = '';
    $end_label = '';
  }

  switch ($node->calendar_state) {
    case 'singleday':
        $times = '<div class="start">'. $start_label . $node->start_time_format .'</div>'."\n";
        if ($node->calendar_start != $node->calendar_end && $node->calendar_end) {
          $times .= '<div class="end">'. $end_label . $node->end_time_format .'</div>'."\n";
        }
      break;
    case 'start':
        $times = '<div class="start">'. $start_label . $node->start_time_format .'</div>'."\n";
      break;
    case 'end':
        $times = '<div class="end">'. $end_label . $node->end_time_format .'</div>'."\n";
      break;
    case 'ongoing':
        $times = '<div class="ongoing">'. t('all day') .'</div>'."\n";
      break;
  }

  $output .= '<div class="title">'. l($node->title, "$node->url", array('title' => t('view this item'))) .'</div>'."\n";
  $output .= $times;
  $output .= '<div class="links">'. theme('links', $node->calendar_links) ."\n</div>";
  $output .= '</div>' . "\n";
  return $output;
}

/**
 * Format an calendar node for display in an expanded calendar, like a calendar page
 *
 * @param node
 *   The node being displayed
 */
function theme_calendar_node_month($node) {

  $output .= '<div class="calendar monthview">'."\n";
  $output .= theme('calendar_stripe_stripe', $node);

  if ($node->calendar_start != $node->calendar_end && $node->start_time_format) {
    $start_label = t('Start: ');
    $end_label = t('End: ');
  }
  else {
    $start_label = '';
    $end_label = '';
  }

  switch ($node->calendar_state) {
    case 'singleday':
      if ($node->start_time_format != $node->end_time_format) {
        $times = '<div class="start">'. $start_label . $node->start_time_format .'</div>'."\n";
      }
      if ($node->calendar_start != $node->calendar_end && $node->calendar_end) {
        $times .= '<div class="end">'. $end_label . $node->end_time_format .'</div>'."\n";
      }
      else {
        $times = '<div class="start">'. $node->start_time_format .'</div>'."\n";
      }
      break;
    case 'start':
        $times = '<div class="start">'. $start_label . $node->start_time_format .'</div>'."\n";
      break;
    case 'end':
        $times = '<div class="end">'. $end_label . $node->end_time_format .'</div>'."\n";
      break;
    case 'ongoing':
        $times = '<div class="ongoing">'. t('all day') .'</div>'."\n";
      break;
  }
  $output .= '<div class="title">'. l($node->title, "$node->url", array('title' => t('view this item'))) .'</div>'."\n";
  $output .= $times;
  $output .= $node->teaser;
  $output .= '<div class="links">'. theme('links', $node->calendar_links) ."\n</div>";
  $output .= '</div>' . "\n";

  return $output;
}

/**
 * Format an date's day box in a calendar
 *
 * @param day
 *   The day to display.
 */
function theme_calendar_date_box($year, $month, $day, $view, $mini = FALSE, $selected = FALSE, $url, $append = '') {

  $url = $url ? $url .'/'. $year .'/'. $month .'/'. $day : 'calendar/'. $year .'/'. $month .'/'. $day;
  if ($mini) {
    if ($selected) {
      return '<div class="mini-day-on">'. l($day, $url, NULL, $append) .'</div>';
    }
    else {
      return '<div class="mini-day-off">'. l($day, $url, NULL, $append) .'</div>';
    }
  }
  switch ($view) {
    case 'table':
        $output = '<div class="day">'. l(t('!month / !day', array('!month' => $month, '!day' => $day)), $url, NULL, $append) .'</div>'."\n";
      break;
    case 'list':
        $output = '<div class="day">'. l(date_format_date('l, F j, Y', date_mktime(array('mon' => $month, 'mday' => $day, 'year' => $year))), $url, NULL, $append) .'</div>'."\n";
      break;
    case 'day':
     break;
    default:
        $output = '<div class="day">'. l($day, $url, NULL, $append) .'</div>'."\n";
      break;
  }
  return $output;
}

/**
 * Format an empty day on a calendar
 *
 * @param day
 *   The day to display.
 */
function theme_calendar_empty_day() {
  return '<div class="calendar-empty">&nbsp;</div>'."\n";
}


/** @} End of addtogroup themeable */